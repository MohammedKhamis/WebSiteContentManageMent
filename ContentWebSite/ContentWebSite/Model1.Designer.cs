//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
namespace ContentWebSite
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class XDG_Content_Management_WebSiteEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new XDG_Content_Management_WebSiteEntities object using the connection string found in the 'XDG_Content_Management_WebSiteEntities' section of the application configuration file.
        /// </summary>
        public XDG_Content_Management_WebSiteEntities() : base("name=XDG_Content_Management_WebSiteEntities", "XDG_Content_Management_WebSiteEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new XDG_Content_Management_WebSiteEntities object.
        /// </summary>
        public XDG_Content_Management_WebSiteEntities(string connectionString) : base(connectionString, "XDG_Content_Management_WebSiteEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new XDG_Content_Management_WebSiteEntities object.
        /// </summary>
        public XDG_Content_Management_WebSiteEntities(EntityConnection connection) : base(connection, "XDG_Content_Management_WebSiteEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Users_view> Users_view
        {
            get
            {
                if ((_Users_view == null))
                {
                    _Users_view = base.CreateObjectSet<Users_view>("Users_view");
                }
                return _Users_view;
            }
        }
        private ObjectSet<Users_view> _Users_view;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<WebSite_view> WebSite_view
        {
            get
            {
                if ((_WebSite_view == null))
                {
                    _WebSite_view = base.CreateObjectSet<WebSite_view>("WebSite_view");
                }
                return _WebSite_view;
            }
        }
        private ObjectSet<WebSite_view> _WebSite_view;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<contents_Of_WebSite> contents_Of_WebSite
        {
            get
            {
                if ((_contents_Of_WebSite == null))
                {
                    _contents_Of_WebSite = base.CreateObjectSet<contents_Of_WebSite>("contents_Of_WebSite");
                }
                return _contents_Of_WebSite;
            }
        }
        private ObjectSet<contents_Of_WebSite> _contents_Of_WebSite;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Contents_view> Contents_view
        {
            get
            {
                if ((_Contents_view == null))
                {
                    _Contents_view = base.CreateObjectSet<Contents_view>("Contents_view");
                }
                return _Contents_view;
            }
        }
        private ObjectSet<Contents_view> _Contents_view;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<pages_view> pages_view
        {
            get
            {
                if ((_pages_view == null))
                {
                    _pages_view = base.CreateObjectSet<pages_view>("pages_view");
                }
                return _pages_view;
            }
        }
        private ObjectSet<pages_view> _pages_view;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Users_view EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUsers_view(Users_view users_view)
        {
            base.AddObject("Users_view", users_view);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the WebSite_view EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToWebSite_view(WebSite_view webSite_view)
        {
            base.AddObject("WebSite_view", webSite_view);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the contents_Of_WebSite EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTocontents_Of_WebSite(contents_Of_WebSite contents_Of_WebSite)
        {
            base.AddObject("contents_Of_WebSite", contents_Of_WebSite);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Contents_view EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToContents_view(Contents_view contents_view)
        {
            base.AddObject("Contents_view", contents_view);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the pages_view EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTopages_view(pages_view pages_view)
        {
            base.AddObject("pages_view", pages_view);
        }

        #endregion

        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="user_Name">No Metadata Documentation available.</param>
        /// <param name="user_mail">No Metadata Documentation available.</param>
        /// <param name="passWord">No Metadata Documentation available.</param>
        public int Add_User(global::System.String user_Name, global::System.String user_mail, global::System.String passWord)
        {
            ObjectParameter user_NameParameter;
            if (user_Name != null)
            {
                user_NameParameter = new ObjectParameter("user_Name", user_Name);
            }
            else
            {
                user_NameParameter = new ObjectParameter("user_Name", typeof(global::System.String));
            }
    
            ObjectParameter user_mailParameter;
            if (user_mail != null)
            {
                user_mailParameter = new ObjectParameter("user_mail", user_mail);
            }
            else
            {
                user_mailParameter = new ObjectParameter("user_mail", typeof(global::System.String));
            }
    
            ObjectParameter passWordParameter;
            if (passWord != null)
            {
                passWordParameter = new ObjectParameter("passWord", passWord);
            }
            else
            {
                passWordParameter = new ObjectParameter("passWord", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("Add_User", user_NameParameter, user_mailParameter, passWordParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="diagramname">No Metadata Documentation available.</param>
        /// <param name="owner_id">No Metadata Documentation available.</param>
        /// <param name="version">No Metadata Documentation available.</param>
        /// <param name="definition">No Metadata Documentation available.</param>
        public int sp_alterdiagram(global::System.String diagramname, Nullable<global::System.Int32> owner_id, Nullable<global::System.Int32> version, global::System.Byte[] definition)
        {
            ObjectParameter diagramnameParameter;
            if (diagramname != null)
            {
                diagramnameParameter = new ObjectParameter("diagramname", diagramname);
            }
            else
            {
                diagramnameParameter = new ObjectParameter("diagramname", typeof(global::System.String));
            }
    
            ObjectParameter owner_idParameter;
            if (owner_id.HasValue)
            {
                owner_idParameter = new ObjectParameter("owner_id", owner_id);
            }
            else
            {
                owner_idParameter = new ObjectParameter("owner_id", typeof(global::System.Int32));
            }
    
            ObjectParameter versionParameter;
            if (version.HasValue)
            {
                versionParameter = new ObjectParameter("version", version);
            }
            else
            {
                versionParameter = new ObjectParameter("version", typeof(global::System.Int32));
            }
    
            ObjectParameter definitionParameter;
            if (definition != null)
            {
                definitionParameter = new ObjectParameter("definition", definition);
            }
            else
            {
                definitionParameter = new ObjectParameter("definition", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="diagramname">No Metadata Documentation available.</param>
        /// <param name="owner_id">No Metadata Documentation available.</param>
        /// <param name="version">No Metadata Documentation available.</param>
        /// <param name="definition">No Metadata Documentation available.</param>
        public int sp_creatediagram(global::System.String diagramname, Nullable<global::System.Int32> owner_id, Nullable<global::System.Int32> version, global::System.Byte[] definition)
        {
            ObjectParameter diagramnameParameter;
            if (diagramname != null)
            {
                diagramnameParameter = new ObjectParameter("diagramname", diagramname);
            }
            else
            {
                diagramnameParameter = new ObjectParameter("diagramname", typeof(global::System.String));
            }
    
            ObjectParameter owner_idParameter;
            if (owner_id.HasValue)
            {
                owner_idParameter = new ObjectParameter("owner_id", owner_id);
            }
            else
            {
                owner_idParameter = new ObjectParameter("owner_id", typeof(global::System.Int32));
            }
    
            ObjectParameter versionParameter;
            if (version.HasValue)
            {
                versionParameter = new ObjectParameter("version", version);
            }
            else
            {
                versionParameter = new ObjectParameter("version", typeof(global::System.Int32));
            }
    
            ObjectParameter definitionParameter;
            if (definition != null)
            {
                definitionParameter = new ObjectParameter("definition", definition);
            }
            else
            {
                definitionParameter = new ObjectParameter("definition", typeof(global::System.Byte[]));
            }
    
            return base.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="diagramname">No Metadata Documentation available.</param>
        /// <param name="owner_id">No Metadata Documentation available.</param>
        public int sp_dropdiagram(global::System.String diagramname, Nullable<global::System.Int32> owner_id)
        {
            ObjectParameter diagramnameParameter;
            if (diagramname != null)
            {
                diagramnameParameter = new ObjectParameter("diagramname", diagramname);
            }
            else
            {
                diagramnameParameter = new ObjectParameter("diagramname", typeof(global::System.String));
            }
    
            ObjectParameter owner_idParameter;
            if (owner_id.HasValue)
            {
                owner_idParameter = new ObjectParameter("owner_id", owner_id);
            }
            else
            {
                owner_idParameter = new ObjectParameter("owner_id", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="diagramname">No Metadata Documentation available.</param>
        /// <param name="owner_id">No Metadata Documentation available.</param>
        public ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(global::System.String diagramname, Nullable<global::System.Int32> owner_id)
        {
            ObjectParameter diagramnameParameter;
            if (diagramname != null)
            {
                diagramnameParameter = new ObjectParameter("diagramname", diagramname);
            }
            else
            {
                diagramnameParameter = new ObjectParameter("diagramname", typeof(global::System.String));
            }
    
            ObjectParameter owner_idParameter;
            if (owner_id.HasValue)
            {
                owner_idParameter = new ObjectParameter("owner_id", owner_id);
            }
            else
            {
                owner_idParameter = new ObjectParameter("owner_id", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="diagramname">No Metadata Documentation available.</param>
        /// <param name="owner_id">No Metadata Documentation available.</param>
        public ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(global::System.String diagramname, Nullable<global::System.Int32> owner_id)
        {
            ObjectParameter diagramnameParameter;
            if (diagramname != null)
            {
                diagramnameParameter = new ObjectParameter("diagramname", diagramname);
            }
            else
            {
                diagramnameParameter = new ObjectParameter("diagramname", typeof(global::System.String));
            }
    
            ObjectParameter owner_idParameter;
            if (owner_id.HasValue)
            {
                owner_idParameter = new ObjectParameter("owner_id", owner_id);
            }
            else
            {
                owner_idParameter = new ObjectParameter("owner_id", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="diagramname">No Metadata Documentation available.</param>
        /// <param name="owner_id">No Metadata Documentation available.</param>
        /// <param name="new_diagramname">No Metadata Documentation available.</param>
        public int sp_renamediagram(global::System.String diagramname, Nullable<global::System.Int32> owner_id, global::System.String new_diagramname)
        {
            ObjectParameter diagramnameParameter;
            if (diagramname != null)
            {
                diagramnameParameter = new ObjectParameter("diagramname", diagramname);
            }
            else
            {
                diagramnameParameter = new ObjectParameter("diagramname", typeof(global::System.String));
            }
    
            ObjectParameter owner_idParameter;
            if (owner_id.HasValue)
            {
                owner_idParameter = new ObjectParameter("owner_id", owner_id);
            }
            else
            {
                owner_idParameter = new ObjectParameter("owner_id", typeof(global::System.Int32));
            }
    
            ObjectParameter new_diagramnameParameter;
            if (new_diagramname != null)
            {
                new_diagramnameParameter = new ObjectParameter("new_diagramname", new_diagramname);
            }
            else
            {
                new_diagramnameParameter = new ObjectParameter("new_diagramname", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public int sp_upgraddiagrams()
        {
            return base.ExecuteFunction("sp_upgraddiagrams");
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="webName">No Metadata Documentation available.</param>
        /// <param name="url">No Metadata Documentation available.</param>
        /// <param name="user_id">No Metadata Documentation available.</param>
        public int create_WebSite(global::System.String webName, global::System.String url, Nullable<global::System.Int32> user_id)
        {
            ObjectParameter webNameParameter;
            if (webName != null)
            {
                webNameParameter = new ObjectParameter("webName", webName);
            }
            else
            {
                webNameParameter = new ObjectParameter("webName", typeof(global::System.String));
            }
    
            ObjectParameter urlParameter;
            if (url != null)
            {
                urlParameter = new ObjectParameter("url", url);
            }
            else
            {
                urlParameter = new ObjectParameter("url", typeof(global::System.String));
            }
    
            ObjectParameter user_idParameter;
            if (user_id.HasValue)
            {
                user_idParameter = new ObjectParameter("user_id", user_id);
            }
            else
            {
                user_idParameter = new ObjectParameter("user_id", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("create_WebSite", webNameParameter, urlParameter, user_idParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="content_Id">No Metadata Documentation available.</param>
        /// <param name="page_id">No Metadata Documentation available.</param>
        /// <param name="number_Content">No Metadata Documentation available.</param>
        public int Add_Contents_Of_Site(Nullable<global::System.Int32> content_Id, Nullable<global::System.Int32> page_id, Nullable<global::System.Int32> number_Content)
        {
            ObjectParameter content_IdParameter;
            if (content_Id.HasValue)
            {
                content_IdParameter = new ObjectParameter("Content_Id", content_Id);
            }
            else
            {
                content_IdParameter = new ObjectParameter("Content_Id", typeof(global::System.Int32));
            }
    
            ObjectParameter page_idParameter;
            if (page_id.HasValue)
            {
                page_idParameter = new ObjectParameter("Page_id", page_id);
            }
            else
            {
                page_idParameter = new ObjectParameter("Page_id", typeof(global::System.Int32));
            }
    
            ObjectParameter number_ContentParameter;
            if (number_Content.HasValue)
            {
                number_ContentParameter = new ObjectParameter("number_Content", number_Content);
            }
            else
            {
                number_ContentParameter = new ObjectParameter("number_Content", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("Add_Contents_Of_Site", content_IdParameter, page_idParameter, number_ContentParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="webSite_Id">No Metadata Documentation available.</param>
        /// <param name="page_Name">No Metadata Documentation available.</param>
        public int Add_Pages(Nullable<global::System.Int32> webSite_Id, global::System.String page_Name)
        {
            ObjectParameter webSite_IdParameter;
            if (webSite_Id.HasValue)
            {
                webSite_IdParameter = new ObjectParameter("webSite_Id", webSite_Id);
            }
            else
            {
                webSite_IdParameter = new ObjectParameter("webSite_Id", typeof(global::System.Int32));
            }
    
            ObjectParameter page_NameParameter;
            if (page_Name != null)
            {
                page_NameParameter = new ObjectParameter("Page_Name", page_Name);
            }
            else
            {
                page_NameParameter = new ObjectParameter("Page_Name", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("Add_Pages", webSite_IdParameter, page_NameParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="content_Name">No Metadata Documentation available.</param>
        public int Add_Content(global::System.String content_Name)
        {
            ObjectParameter content_NameParameter;
            if (content_Name != null)
            {
                content_NameParameter = new ObjectParameter("content_Name", content_Name);
            }
            else
            {
                content_NameParameter = new ObjectParameter("content_Name", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("Add_Content", content_NameParameter);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="XDG_Content_Management_WebSiteModel", Name="contents_Of_WebSite")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class contents_Of_WebSite : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new contents_Of_WebSite object.
        /// </summary>
        /// <param name="cont_id">Initial value of the cont_id property.</param>
        /// <param name="pg_id">Initial value of the Pg_id property.</param>
        public static contents_Of_WebSite Createcontents_Of_WebSite(global::System.Int32 cont_id, global::System.Int32 pg_id)
        {
            contents_Of_WebSite contents_Of_WebSite = new contents_Of_WebSite();
            contents_Of_WebSite.cont_id = cont_id;
            contents_Of_WebSite.Pg_id = pg_id;
            return contents_Of_WebSite;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 cont_id
        {
            get
            {
                return _cont_id;
            }
            set
            {
                if (_cont_id != value)
                {
                    Oncont_idChanging(value);
                    ReportPropertyChanging("cont_id");
                    _cont_id = StructuralObject.SetValidValue(value, "cont_id");
                    ReportPropertyChanged("cont_id");
                    Oncont_idChanged();
                }
            }
        }
        private global::System.Int32 _cont_id;
        partial void Oncont_idChanging(global::System.Int32 value);
        partial void Oncont_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Pg_id
        {
            get
            {
                return _Pg_id;
            }
            set
            {
                if (_Pg_id != value)
                {
                    OnPg_idChanging(value);
                    ReportPropertyChanging("Pg_id");
                    _Pg_id = StructuralObject.SetValidValue(value, "Pg_id");
                    ReportPropertyChanged("Pg_id");
                    OnPg_idChanged();
                }
            }
        }
        private global::System.Int32 _Pg_id;
        partial void OnPg_idChanging(global::System.Int32 value);
        partial void OnPg_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> number_Content
        {
            get
            {
                return _number_Content;
            }
            set
            {
                Onnumber_ContentChanging(value);
                ReportPropertyChanging("number_Content");
                _number_Content = StructuralObject.SetValidValue(value, "number_Content");
                ReportPropertyChanged("number_Content");
                Onnumber_ContentChanged();
            }
        }
        private Nullable<global::System.Int32> _number_Content;
        partial void Onnumber_ContentChanging(Nullable<global::System.Int32> value);
        partial void Onnumber_ContentChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="XDG_Content_Management_WebSiteModel", Name="Contents_view")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Contents_view : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Contents_view object.
        /// </summary>
        /// <param name="content_id">Initial value of the content_id property.</param>
        public static Contents_view CreateContents_view(global::System.Int32 content_id)
        {
            Contents_view contents_view = new Contents_view();
            contents_view.content_id = content_id;
            return contents_view;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 content_id
        {
            get
            {
                return _content_id;
            }
            set
            {
                if (_content_id != value)
                {
                    Oncontent_idChanging(value);
                    ReportPropertyChanging("content_id");
                    _content_id = StructuralObject.SetValidValue(value, "content_id");
                    ReportPropertyChanged("content_id");
                    Oncontent_idChanged();
                }
            }
        }
        private global::System.Int32 _content_id;
        partial void Oncontent_idChanging(global::System.Int32 value);
        partial void Oncontent_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String content_name
        {
            get
            {
                return _content_name;
            }
            set
            {
                Oncontent_nameChanging(value);
                ReportPropertyChanging("content_name");
                _content_name = StructuralObject.SetValidValue(value, true, "content_name");
                ReportPropertyChanged("content_name");
                Oncontent_nameChanged();
            }
        }
        private global::System.String _content_name;
        partial void Oncontent_nameChanging(global::System.String value);
        partial void Oncontent_nameChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="XDG_Content_Management_WebSiteModel", Name="pages_view")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class pages_view : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new pages_view object.
        /// </summary>
        /// <param name="page_id">Initial value of the page_id property.</param>
        public static pages_view Createpages_view(global::System.Int32 page_id)
        {
            pages_view pages_view = new pages_view();
            pages_view.page_id = page_id;
            return pages_view;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> web_id
        {
            get
            {
                return _web_id;
            }
            set
            {
                Onweb_idChanging(value);
                ReportPropertyChanging("web_id");
                _web_id = StructuralObject.SetValidValue(value, "web_id");
                ReportPropertyChanged("web_id");
                Onweb_idChanged();
            }
        }
        private Nullable<global::System.Int32> _web_id;
        partial void Onweb_idChanging(Nullable<global::System.Int32> value);
        partial void Onweb_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String name_Of_Page
        {
            get
            {
                return _name_Of_Page;
            }
            set
            {
                Onname_Of_PageChanging(value);
                ReportPropertyChanging("name_Of_Page");
                _name_Of_Page = StructuralObject.SetValidValue(value, true, "name_Of_Page");
                ReportPropertyChanged("name_Of_Page");
                Onname_Of_PageChanged();
            }
        }
        private global::System.String _name_Of_Page;
        partial void Onname_Of_PageChanging(global::System.String value);
        partial void Onname_Of_PageChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 page_id
        {
            get
            {
                return _page_id;
            }
            set
            {
                if (_page_id != value)
                {
                    Onpage_idChanging(value);
                    ReportPropertyChanging("page_id");
                    _page_id = StructuralObject.SetValidValue(value, "page_id");
                    ReportPropertyChanged("page_id");
                    Onpage_idChanged();
                }
            }
        }
        private global::System.Int32 _page_id;
        partial void Onpage_idChanging(global::System.Int32 value);
        partial void Onpage_idChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="XDG_Content_Management_WebSiteModel", Name="Users_view")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Users_view : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Users_view object.
        /// </summary>
        /// <param name="user_Id">Initial value of the user_Id property.</param>
        public static Users_view CreateUsers_view(global::System.Int32 user_Id)
        {
            Users_view users_view = new Users_view();
            users_view.user_Id = user_Id;
            return users_view;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 user_Id
        {
            get
            {
                return _user_Id;
            }
            set
            {
                if (_user_Id != value)
                {
                    Onuser_IdChanging(value);
                    ReportPropertyChanging("user_Id");
                    _user_Id = StructuralObject.SetValidValue(value, "user_Id");
                    ReportPropertyChanged("user_Id");
                    Onuser_IdChanged();
                }
            }
        }
        private global::System.Int32 _user_Id;
        partial void Onuser_IdChanging(global::System.Int32 value);
        partial void Onuser_IdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String user_Name
        {
            get
            {
                return _user_Name;
            }
            set
            {
                Onuser_NameChanging(value);
                ReportPropertyChanging("user_Name");
                _user_Name = StructuralObject.SetValidValue(value, true, "user_Name");
                ReportPropertyChanged("user_Name");
                Onuser_NameChanged();
            }
        }
        private global::System.String _user_Name;
        partial void Onuser_NameChanging(global::System.String value);
        partial void Onuser_NameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String user_mail
        {
            get
            {
                return _user_mail;
            }
            set
            {
                Onuser_mailChanging(value);
                ReportPropertyChanging("user_mail");
                _user_mail = StructuralObject.SetValidValue(value, true, "user_mail");
                ReportPropertyChanged("user_mail");
                Onuser_mailChanged();
            }
        }
        private global::System.String _user_mail;
        partial void Onuser_mailChanging(global::System.String value);
        partial void Onuser_mailChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String passWord
        {
            get
            {
                return _passWord;
            }
            set
            {
                OnpassWordChanging(value);
                ReportPropertyChanging("passWord");
                _passWord = StructuralObject.SetValidValue(value, true, "passWord");
                ReportPropertyChanged("passWord");
                OnpassWordChanged();
            }
        }
        private global::System.String _passWord;
        partial void OnpassWordChanging(global::System.String value);
        partial void OnpassWordChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="XDG_Content_Management_WebSiteModel", Name="WebSite_view")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WebSite_view : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new WebSite_view object.
        /// </summary>
        /// <param name="web_id">Initial value of the web_id property.</param>
        public static WebSite_view CreateWebSite_view(global::System.Int32 web_id)
        {
            WebSite_view webSite_view = new WebSite_view();
            webSite_view.web_id = web_id;
            return webSite_view;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 web_id
        {
            get
            {
                return _web_id;
            }
            set
            {
                if (_web_id != value)
                {
                    Onweb_idChanging(value);
                    ReportPropertyChanging("web_id");
                    _web_id = StructuralObject.SetValidValue(value, "web_id");
                    ReportPropertyChanged("web_id");
                    Onweb_idChanged();
                }
            }
        }
        private global::System.Int32 _web_id;
        partial void Onweb_idChanging(global::System.Int32 value);
        partial void Onweb_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String url
        {
            get
            {
                return _url;
            }
            set
            {
                OnurlChanging(value);
                ReportPropertyChanging("url");
                _url = StructuralObject.SetValidValue(value, true, "url");
                ReportPropertyChanged("url");
                OnurlChanged();
            }
        }
        private global::System.String _url;
        partial void OnurlChanging(global::System.String value);
        partial void OnurlChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, true, "name");
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> user_id
        {
            get
            {
                return _user_id;
            }
            set
            {
                Onuser_idChanging(value);
                ReportPropertyChanging("user_id");
                _user_id = StructuralObject.SetValidValue(value, "user_id");
                ReportPropertyChanged("user_id");
                Onuser_idChanged();
            }
        }
        private Nullable<global::System.Int32> _user_id;
        partial void Onuser_idChanging(Nullable<global::System.Int32> value);
        partial void Onuser_idChanged();

        #endregion

    }

    #endregion

    #region ComplexTypes
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="XDG_Content_Management_WebSiteModel", Name="sp_helpdiagramdefinition_Result")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class sp_helpdiagramdefinition_Result : ComplexObject
    {
        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> version
        {
            get
            {
                return _version;
            }
            set
            {
                OnversionChanging(value);
                ReportPropertyChanging("version");
                _version = StructuralObject.SetValidValue(value, "version");
                ReportPropertyChanged("version");
                OnversionChanged();
            }
        }
        private Nullable<global::System.Int32> _version;
        partial void OnversionChanging(Nullable<global::System.Int32> value);
        partial void OnversionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] definition
        {
            get
            {
                return StructuralObject.GetValidValue(_definition);
            }
            set
            {
                OndefinitionChanging(value);
                ReportPropertyChanging("definition");
                _definition = StructuralObject.SetValidValue(value, true, "definition");
                ReportPropertyChanged("definition");
                OndefinitionChanged();
            }
        }
        private global::System.Byte[] _definition;
        partial void OndefinitionChanging(global::System.Byte[] value);
        partial void OndefinitionChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="XDG_Content_Management_WebSiteModel", Name="sp_helpdiagrams_Result")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class sp_helpdiagrams_Result : ComplexObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new sp_helpdiagrams_Result object.
        /// </summary>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="id">Initial value of the ID property.</param>
        /// <param name="ownerID">Initial value of the OwnerID property.</param>
        public static sp_helpdiagrams_Result Createsp_helpdiagrams_Result(global::System.String name, global::System.Int32 id, global::System.Int32 ownerID)
        {
            sp_helpdiagrams_Result sp_helpdiagrams_Result = new sp_helpdiagrams_Result();
            sp_helpdiagrams_Result.Name = name;
            sp_helpdiagrams_Result.ID = id;
            sp_helpdiagrams_Result.OwnerID = ownerID;
            return sp_helpdiagrams_Result;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Database
        {
            get
            {
                return _Database;
            }
            set
            {
                OnDatabaseChanging(value);
                ReportPropertyChanging("Database");
                _Database = StructuralObject.SetValidValue(value, true, "Database");
                ReportPropertyChanged("Database");
                OnDatabaseChanged();
            }
        }
        private global::System.String _Database;
        partial void OnDatabaseChanging(global::System.String value);
        partial void OnDatabaseChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                OnIDChanging(value);
                ReportPropertyChanging("ID");
                _ID = StructuralObject.SetValidValue(value, "ID");
                ReportPropertyChanged("ID");
                OnIDChanged();
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Owner
        {
            get
            {
                return _Owner;
            }
            set
            {
                OnOwnerChanging(value);
                ReportPropertyChanging("Owner");
                _Owner = StructuralObject.SetValidValue(value, true, "Owner");
                ReportPropertyChanged("Owner");
                OnOwnerChanged();
            }
        }
        private global::System.String _Owner;
        partial void OnOwnerChanging(global::System.String value);
        partial void OnOwnerChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 OwnerID
        {
            get
            {
                return _OwnerID;
            }
            set
            {
                OnOwnerIDChanging(value);
                ReportPropertyChanging("OwnerID");
                _OwnerID = StructuralObject.SetValidValue(value, "OwnerID");
                ReportPropertyChanged("OwnerID");
                OnOwnerIDChanged();
            }
        }
        private global::System.Int32 _OwnerID;
        partial void OnOwnerIDChanging(global::System.Int32 value);
        partial void OnOwnerIDChanged();

        #endregion

    }

    #endregion

}
